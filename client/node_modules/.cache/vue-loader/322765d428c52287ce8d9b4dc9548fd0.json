{"remainingRequest":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\src\\views\\ResetPassword.vue?vue&type=style&index=0&id=16293040&lang=css&","dependencies":[{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\src\\views\\ResetPassword.vue","mtime":1673100125779},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\css-loader\\dist\\cjs.js","mtime":1673005386571},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1673005392991},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":1673005390218},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673005385989},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1673005392990}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouY2VudGVyIHsNCmRpc3BsYXk6IGZsZXg7DQpqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCmFsaWduLWl0ZW1zOiBjZW50ZXI7DQpmbGV4LWRpcmVjdGlvbjogY29sdW1uOw0KaGVpZ2h0OiAxMDAlOw0KYmFja2dyb3VuZC1jb2xvcjogIzgwQkFCMjsNCm1pbi13aWR0aDogNzAwcHg7DQptaW4taGVpZ2h0OiAxMTAwcHg7DQp9DQouY2FyZCB7DQogIGhlaWdodDogMTAwJTsNCiAgd2lkdGg6IDMwJTsNCn0NCiNyZXF1ZXN0Q29kZSB7DQpwb3NpdGlvbjogcmVsYXRpdmU7DQpsZWZ0OiAyMHB4Ow0KcGFkZGluZzogNXB4Ow0KfQ0KDQo="},{"version":3,"sources":["ResetPassword.vue"],"names":[],"mappings":";AA2HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ResetPassword.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"center\">\r\n    <div class=\"warning\">\r\n      <p id=\"pop-up\">{{ this.unsuccessful }}</p>\r\n    </div>\r\n    <div class=\"card\" style=\"width: 25rareem;\">\r\n      <img class=\"card-img-top\" src=\"https://cdn-icons-png.flaticon.com/512/6195/6195699.png\" alt=\"Card image cap\">\r\n      <div class=\"card-body\">\r\n        <h5 class=\"card-title\">resetting your password</h5>\r\n        <p class=\"card-text\">Enter your email and password to login or click register to be redirected to registration.</p>\r\n      </div>\r\n      <ul class=\"list-group list-group-flush\">\r\n        <li class=\"list-group-item\"><input id=\"inputEmail\" v-model='emailText' placeholder=\"Email\"> <button id=\"requestCode\" @click=\"emailCode\" class=\"btn btn-info\">email code</button></li>\r\n        <li class=\"list-group-item\"><input id=\"inputcode\" v-model='codeText' placeholder=\"insert code\"></li>\r\n        <li class=\"list-group-item\"><input id=\"inputnewPassword\" v-model='newPasswordText' placeholder=\"new password\"></li>\r\n        <li class=\"list-group-item\"><input id=\"inputconfirmPassword\" v-model='confirmPasswordText' placeholder=\"confirm password\"></li>\r\n      </ul>\r\n      <div class=\"card-body\">\r\n        <button id=\"buttonResetPassword\" @click=\"resetPassword\" class=\"btn btn-secondary\">resent password</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport mymqtt from '../mymqtt'\r\nimport checkingInputs from '../checkingInputs'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      qos: 2,\r\n      topicEmail: 'dentistimo/send-email-code/dentist',\r\n      topicSubscribeEmail: 'dentistimo/send-email-code/dentist/',\r\n      topicReset: 'dentistimo/reset-password/dentist',\r\n      topicSubscribeReset: 'dentistimo/reset-password/dentist/',\r\n      topicError: 'dentistimo/reset-password/error',\r\n      topicSubscribeError: 'dentistimo/reset-password/error/',\r\n      mqtt_client: null,\r\n      requestID: '',\r\n      receive: '',\r\n      unsuccessful: '',\r\n      emailText: '',\r\n      codeText: '',\r\n      newPasswordText: '',\r\n      confirmPasswordText: ''\r\n    }\r\n  },\r\n  mounted() {\r\n    this.mqtt_client = mymqtt.createClient()\r\n    const msgCallback = (topic, message) => {\r\n      this.unsuccessful = ''\r\n      this.receive = message.toString()\r\n      if (topic.includes('error')) {\r\n        this.unsuccessful = this.receive\r\n        console.log('failure')\r\n      } else if (topic.includes('success')) {\r\n        console.log('success')\r\n        console.log(this.receive)\r\n      }\r\n    // console.log({ topic: topic, message: message.toString() })\r\n    }\r\n    this.mqtt_client.on('message', msgCallback)\r\n    this.mqtt_client.on('subscribe', (topic) => {\r\n      console.log('Subscribed too: ', topic)\r\n    })\r\n  },\r\n  methods: {\r\n    emailCode() {\r\n      this.requestID = checkingInputs.makeRandomId(10)\r\n      const payload = JSON.stringify({\r\n        email: this.emailText,\r\n        requestId: this.requestID\r\n      })\r\n      console.log(payload)\r\n      this.publishReceive(payload, this.topicEmail, this.topicSubscribeEmail)\r\n    },\r\n    resetPassword() {\r\n      const result = this.checkPassword()\r\n      const result2 = checkingInputs.checkSameString(this.newPasswordText, this.confirmPasswordText)\r\n      if (result === true) {\r\n        this.requestID = checkingInputs.makeRandomId(10)\r\n        const payload = JSON.stringify({\r\n          email: this.emailText,\r\n          userCode: this.codeText,\r\n          newPassword: this.newPasswordText,\r\n          requestId: this.requestID\r\n        })\r\n        this.publishReceive(payload, this.topicReset, this.topicSubscribeReset)\r\n      } else if (result2 === false) {\r\n        this.unsuccessful = 'passwords do not match'\r\n      }\r\n    },\r\n    publishReceive(payload, publishTopic, subscribeTopic) {\r\n      this.mqtt_client.subscribe(subscribeTopic + this.requestID, { qos: this.qos }, (error, res) => {\r\n        if (error) { console.log('error = ', error) } else { console.log('res = ', res) }\r\n      })\r\n      this.mqtt_client.publish(publishTopic, payload, this.qos)\r\n    },\r\n    checkPassword() {\r\n      const result1 = checkingInputs.containsSpecialChars(this.newPasswordText)\r\n      const result2 = checkingInputs.strinContainsNumbers(this.newPasswordText)\r\n      const result3 = checkingInputs.checkStringLength(this.newPasswordText)\r\n      if (result1 === false) {\r\n        this.unsuccessful = 'password needs a special character'\r\n        return false\r\n      } else if (result2 === false) {\r\n        this.unsuccessful = 'password needs a number'\r\n        return false\r\n      } else if (result3 === false) {\r\n        this.unsuccessful = 'password needs to be between 8 and 99 characters'\r\n        return false\r\n      } else {\r\n        this.unsuccessful = ''\r\n        return true\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n.center {\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nflex-direction: column;\r\nheight: 100%;\r\nbackground-color: #80BAB2;\r\nmin-width: 700px;\r\nmin-height: 1100px;\r\n}\r\n.card {\r\n  height: 100%;\r\n  width: 30%;\r\n}\r\n#requestCode {\r\nposition: relative;\r\nleft: 20px;\r\npadding: 5px;\r\n}\r\n\r\n</style>\r\n"]}]}