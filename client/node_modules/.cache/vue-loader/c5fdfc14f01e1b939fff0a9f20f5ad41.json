{"remainingRequest":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\src\\views\\Login.vue?vue&type=style&index=0&id=26084dc2&lang=css&","dependencies":[{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\src\\views\\Login.vue","mtime":1673101752823},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\css-loader\\dist\\cjs.js","mtime":1673101745247},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1673101752031},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":1673101749193},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673101744652},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1673101752030}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouY2VudGVyIHsNCiAgZGlzcGxheTogZmxleDsNCiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogIGhlaWdodDogMTAwJTsNCiAgYmFja2dyb3VuZC1jb2xvcjogIzgwQkFCMjsNCiAgbWluLXdpZHRoOiA3MDBweDsNCiAgbWluLWhlaWdodDogODAwcHg7DQp9DQoNCiNiaXR0cG5SZWdpc3RlciB7DQogIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCiAgbWFyZ2luOiAxMHB4Ow0KfQ0KDQo="},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";AAmJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"center\">\r\n    <div class=\"warning\">\r\n      <p id=\"pop-up\">{{ this.unsuccessful }}</p>\r\n    </div>\r\n    <div class=\"card\" style=\"width: 25rem;\">\r\n      <img class=\"card-img-top\" src=\"https://img.freepik.com/free-vector/dentists-holding-instruments-examining-teeth-decay-white_1308-92127.jpg?w=740&t=st=1672838470~exp=1672839070~hmac=777c39ac851efd86106686fe5038f27eded8653e9269275f9a251ff89c35cd83\" alt=\"Card image cap\">\r\n      <div class=\"card-body\">\r\n        <h5 class=\"card-title\">Welcome back!</h5>\r\n        <p class=\"card-text\">Enter your email and password to login or click register to be redirected to registration.</p>\r\n      </div>\r\n      <ul class=\"list-group list-group-flush\">\r\n        <li class=\"list-group-item\"><input id=\"inputEmail\" v-model='changeEmailText' placeholder=\"Email\"></li>\r\n        <li class=\"list-group-item\"><input id=\"inputPassword\" v-model='changePasswordText' placeholder=\"Password\"></li>\r\n        <!-- <input id=\"inputEmail\" v-model='changeEmailText' placeholder=\"Email\">\r\n        <input id=\"inputpassword\" v-model='changePasswordText' placeholder=\"Password\">\r\n      -->\r\n      </ul>\r\n      <div class=\"card-body\">\r\n        <button id=\"bittpnLogin\" @click=\"login\" class=\"btn btn-info btn-lg\">Login</button>\r\n        <button id=\"bittpnRegister\" @click=\"register\" class=\"btn btn-dark btn-lg\">Register</button>\r\n        <button id=\"buttonResetPassword\" @click=\"resetPassword\" class=\"btn btn-secondary\">Reset password</button>\r\n      </div>\r\n    </div>\r\n    <!--\r\n    <div class=\"inputAndButton\">\r\n      <input id=\"inputEmail\" v-model='changeEmailText' placeholder=\"enter new email\">\r\n      <P></P>\r\n      <input id=\"inputpassword\" v-model='changePasswordText' placeholder=\"enter new password\">\r\n      <P></P>\r\n      <button id=\"bittpnLogin\" @click=\"login\" class=\"btn btn-success btn-lg\">login</button>\r\n      <button id=\"bittpnRegister\" @click=\"register\" class=\"btn btn-success btn-lg\">register</button>\r\n    </div>\r\n     -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport mymqtt from '../mymqtt'\r\nimport checkingInputs from '../checkingInputs'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      notOrLogin: '',\r\n      mqtt_client: null,\r\n      receive: '',\r\n      requestID: '',\r\n      qos: 2,\r\n      topic: 'dentistimo/login/dentist',\r\n      changeEmailText: '',\r\n      changePasswordText: '',\r\n      unsuccessful: ''\r\n    }\r\n  },\r\n  mounted() {\r\n    this.mqtt_client = mymqtt.createClient()\r\n    const msgCallback = (topic, message) => {\r\n      this.unsuccessful = ''\r\n      this.receive = message.toString()\r\n      if (topic.includes('error')) {\r\n        this.unsuccessful = this.receive\r\n        console.log('failure')\r\n      } else {\r\n        console.log('success')\r\n        console.log(this.receive)\r\n        if (this.receive.includes(this.changeEmailText)) {\r\n          // localStorage.removeItem('accountInfo') // --> don't know if there will be an error if it doesn't existwhen you first login for the first time\r\n          localStorage.setItem('accountInfo', this.receive)\r\n          this.$router.push('/')\r\n          location.reload()\r\n        } else {\r\n          console.log('Login failed')\r\n          this.unsuccessful = 'Login failed' // not working figured out when Felix is programs not running with my\r\n        }\r\n      }\r\n      // console.log({ topic: topic, message: message.toString() })\r\n    }\r\n    this.mqtt_client.on('message', msgCallback)\r\n    this.mqtt_client.on('subscribe', (topic) => {\r\n      console.log('Subscribed too: ', topic)\r\n    })\r\n  },\r\n  methods: {\r\n    checkPassword() {\r\n      const result1 = checkingInputs.containsSpecialChars(this.changePasswordText)\r\n      const result2 = checkingInputs.strinContainsNumbers(this.changePasswordText)\r\n      const result3 = checkingInputs.checkStringLength(this.changePasswordText)\r\n      if (result1 === false) {\r\n        this.unsuccessful = 'Password needs a special character'\r\n        return false\r\n      } else if (result2 === false) {\r\n        this.unsuccessful = 'Password needs a number'\r\n        return false\r\n      } else if (result3 === false) {\r\n        this.unsuccessful = 'Password needs to be between 8 and 99 characters'\r\n        return false\r\n      } else {\r\n        this.unsuccessful = ''\r\n        return true\r\n      }\r\n    },\r\n    login() {\r\n      // const test1 = JSON.stringify({\r\n      //   token: '123QWE!@#',\r\n      //   dentistId: 12345,\r\n      //   email: 'liamaxelrod@gmail.com',\r\n      //   firstName: 'liam',\r\n      //   lastName: 'axelrod',\r\n      //   officeId: 1\r\n      // })\r\n      // localStorage.setItem('accountInfo', test1)\r\n      const check = this.checkPassword()\r\n      const check2 = checkingInputs.checkEmail(this.changeEmailText)\r\n      if (check2 === false) {\r\n        this.unsuccessful = 'Email needs to contain @'\r\n      } else if (check === false) {\r\n        // responses in checkPassword()\r\n      } else {\r\n        this.requestID = checkingInputs.makeRandomId(10)\r\n        this.mqtt_client.subscribe('dentistimo/login/dentist/' + this.requestID, { qos: 2 }, (error, res) => {\r\n          if (error) { console.log('error = ', error) } else { console.log('res = ', res) }\r\n        })\r\n        this.mqtt_client.subscribe('dentistimo/login/error/' + this.requestID, { qos: 2 }, (error, res) => {\r\n          if (error) { console.log('error = ', error) } else { console.log('res = ', res) }\r\n        })\r\n        const payload = JSON.stringify({\r\n          email: this.changeEmailText,\r\n          password: this.changePasswordText,\r\n          requestId: this.requestID\r\n        })\r\n        this.mqtt_client.publish(this.topic, payload, this.qos)\r\n        this.unsuccessful = 'Login error please try again later' // if a message is received this will return to being blank\r\n      }\r\n    },\r\n    register() {\r\n      this.$router.push('/register')\r\n    },\r\n    resetPassword() {\r\n      this.$router.push('/resetPassword')\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n.center {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  background-color: #80BAB2;\r\n  min-width: 700px;\r\n  min-height: 800px;\r\n}\r\n\r\n#bittpnRegister {\r\n  display: inline-block;\r\n  margin: 10px;\r\n}\r\n\r\n</style>\r\n"]}]}