{"remainingRequest":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\src\\views\\Register.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\src\\views\\Register.vue","mtime":1671723970934},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\css-loader\\dist\\cjs.js","mtime":1671718564948},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1671718575730},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":1671718571291},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1671718563379},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1671718575728}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmJhY2tncm91bmQgew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOw0KICAgIGhlaWdodDogMTAwJTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjODBCQUIyOw0KfQ0KI3BvcC11cCB7DQogICAgY29sb3I6IHJlZDsNCiAgICBmb250LXNpemU6IDIwcHg7DQp9DQojcmVnaXN0ZXJCdXR0b24gew0KICAgIHdpZHRoOiAxMDAlOw0KfQ0K"},{"version":3,"sources":["Register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Register.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    <div class=\"background\">\r\n        <div class=\"warning\">\r\n          <p id=\"pop-up\" >{{this.unsuccessful}}</p>\r\n        </div>\r\n        <div class=\"aboveButtons\">\r\n            <input id=\"inputFirstName\" v-model='changeFirstNameText' placeholder=\"enter your first name\">\r\n            <P></P>\r\n            <input id=\"inputLastName\" v-model='changeLastNameText' placeholder=\"enter your last name\">\r\n            <P></P>\r\n            <input id=\"inputpassword\" v-model='changePasswordText' placeholder=\"enter new password\">\r\n            <P></P>\r\n            <input id=\"checkPassword\" v-model='changeCheckPasswordText' placeholder=\"reenter your password\">\r\n            <P></P>\r\n            <input id=\"inputCompany\" v-model='changecompanyText' placeholder=\"enter new Company\">\r\n            <P></P>\r\n            <input id=\"inputeEmail\" v-model='changeEmailText' placeholder=\"enter new Email\">\r\n            <P></P>\r\n            <button id=\"registerButton\" @click=\"register\" class=\"btn btn-success btn-lg\">register</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n// import App from '../App.vue'\r\nimport mymqtt from '../mymqtt'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      mqtt_client: null,\r\n      receive: '', // receives messages\r\n      requestID: '',\r\n      qos: 0,\r\n      topic: 'dentistimo/register/dentist',\r\n      changeFirstNameText: '',\r\n      changeLastNameText: '',\r\n      changePasswordText: '',\r\n      changeCheckPasswordText: '',\r\n      changecompanyText: '',\r\n      changeEmailText: '',\r\n      unsuccessful: '',\r\n      subscription: {\r\n        topic: 'test',\r\n        qos: 0\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.mqtt_client = mymqtt.createClient()\r\n    const msgCallback = (topic, message) => {\r\n      this.receive = message.toString()\r\n      console.log(topic)\r\n      if (topic.includes('error')) {\r\n        this.unsuccessful = this.receive\r\n      } else {\r\n        console.log('no')\r\n      }\r\n      // console.log({ topic: topic, message: message.toString() })\r\n    }\r\n    this.mqtt_client.on('message', msgCallback)\r\n    this.mqtt_client.on('subscribe', (topic) => {\r\n      console.log('Subscribed too: ', topic)\r\n    })\r\n    // this.mqtt_client.subscribe('dentistimo/register/dentist', { qos: 0 }, (error, res) => {\r\n    //   if (error) {\r\n    //     console.log('error = ', error)\r\n    //   } else {\r\n    //     console.log('res = ', res)\r\n    //   }\r\n    // })\r\n  },\r\n  methods: {\r\n    makeid(n) {\r\n      let text = ''\r\n      const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n      for (let i = 0; i < n; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length))\r\n      }\r\n      return text\r\n    },\r\n    containsSpecialChars(str) {\r\n      const specialChars = '[`!@#$%^&*()_+-=[]{};\\':\"\\\\|,.<>/?~]/'\r\n      return specialChars.split('')\r\n        .some((specialChar) => str.includes(specialChar))\r\n    },\r\n    containsNumbers(str) {\r\n      const specialChars = '1234567890'\r\n      return specialChars.split('')\r\n        .some((specialChar) => str.includes(specialChar))\r\n    },\r\n    checkStringLength(str) {\r\n      if (str.length >= 8 && str.length <= 16) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    checkForSamePasswords() {\r\n      if (this.changePasswordText === this.changeCheckPasswordText) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    checkPassword() {\r\n      const result1 = this.containsSpecialChars(this.changePasswordText)\r\n      const result2 = this.containsNumbers(this.changePasswordText)\r\n      const result3 = this.checkStringLength(this.changePasswordText)\r\n      if (result1 === false) {\r\n        this.unsuccessful = 'password needs a special character'\r\n        return false\r\n      } else if (result2 === false) {\r\n        this.unsuccessful = 'password needs a number'\r\n        return false\r\n      } else if (result3 === false) {\r\n        this.unsuccessful = 'password needs to be between 8 and 16 characters'\r\n        return false\r\n      } else {\r\n        this.unsuccessful = ''\r\n        return true\r\n      }\r\n    },\r\n    register() {\r\n      if (this.checkPassword() === false) {\r\n        // responses are in checkPassword()\r\n      } else if (this.checkForSamePasswords() === false) {\r\n        this.unsuccessful = 'passwords are not the same'\r\n      } else if (this.changeFirstNameText === '') {\r\n        this.unsuccessful = 'first name is empty'\r\n      } else if (this.changeLastNameText === '') {\r\n        this.unsuccessful = 'last name is empty'\r\n      } else if (this.changecompanyText === '') {\r\n        this.unsuccessful = 'company is empty'\r\n      } else if (this.changeEmailText === '') {\r\n        this.unsuccessful = 'email is empty'\r\n      } else {\r\n        this.requestID = this.makeid(10)\r\n        // console.log(this.requestID)\r\n        this.mqtt_client.subscribe('dentistimo/register/dentist/' + this.requestID, { qos: 0 }, (error, res) => {\r\n          if (error) {\r\n            console.log('error = ', error)\r\n          } else {\r\n            console.log('res = ', res)\r\n          }\r\n        })\r\n        this.mqtt_client.subscribe('dentistimo/register/error/' + this.requestID, { qos: 0 }, (error, res) => {\r\n          if (error) {\r\n            console.log('error = ', error)\r\n          } else {\r\n            console.log('res fail = ', res)\r\n          }\r\n        })\r\n        const payload = JSON.stringify({\r\n          firstName: this.changeFirstNameText,\r\n          lastName: this.changeLastNameText,\r\n          password: this.changePasswordText,\r\n          passwordCheck: this.changeCheckPasswordText,\r\n          companyName: this.changecompanyText,\r\n          email: this.changeEmailText,\r\n          requestId: this.requestID\r\n        })\r\n        this.mqtt_client.publish(this.topic, payload, this.qos)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.background {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    background-color: #80BAB2;\r\n}\r\n#pop-up {\r\n    color: red;\r\n    font-size: 20px;\r\n}\r\n#registerButton {\r\n    width: 100%;\r\n}\r\n</style>\r\n"]}]}