{"remainingRequest":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\src\\views\\Login.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\src\\views\\Login.vue","mtime":1671716131635},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\css-loader\\dist\\cjs.js","mtime":1670944876648},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1671566348757},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":1670944881773},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1670944875280},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1671566348756}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouY2VudGVyIHsNCiAgZGlzcGxheTogZmxleDsNCiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogIGhlaWdodDogMTAwJTsNCiAgYmFja2dyb3VuZC1jb2xvcjogIzgwQkFCMjsNCn0NCiNiaXR0cG5SZWdpc3RlciB7DQogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KICAgIG1hcmdpbjogMTBweDsNCn0NCg=="},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    <div class=\"center\">\r\n        <div class=\"warning\">\r\n          <p id=\"pop-up\">{{this.unsuccessful}}</p>\r\n        </div>\r\n        <div class=\"inputAndButton\">\r\n            <input id=\"inputEmail\" v-model='changeEmailText' placeholder=\"enter new email\">\r\n            <P></P>\r\n            <input id=\"inputpassword\" v-model='changePasswordText' placeholder=\"enter new password\">\r\n            <P></P>\r\n            <button id=\"bittpnLogin\" @click=\"login\" class=\"btn btn-success btn-lg\">login</button>\r\n            <button id=\"bittpnRegister\" @click=\"register\" class=\"btn btn-success btn-lg\">register</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport mymqtt from '../mymqtt'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      mqtt_client: null,\r\n      receive: '',\r\n      qos: 0,\r\n      topic: 'dentist/client/login',\r\n      changeEmailText: '',\r\n      changePasswordText: '',\r\n      unsuccessful: ''\r\n    }\r\n  },\r\n  mounted() {\r\n    this.mqtt_client = mymqtt.createClient()\r\n    const msgCallback = (topic, message) => {\r\n      this.receive = message.toString()\r\n      console.log({ topic: topic, message: message.toString() })\r\n    }\r\n    this.mqtt_client.on('message', msgCallback)\r\n    this.mqtt_client.on('subscribe', (topic) => {\r\n      console.log('Subscribed too: ', topic)\r\n    })\r\n    this.mqtt_client.subscribe('dentist/client/login', { qos: 0 }, (error, res) => {\r\n      if (error) {\r\n        console.log('error = ', error)\r\n      } else {\r\n        console.log('res = ', res)\r\n      }\r\n    })\r\n  },\r\n  methods: {\r\n    containsSpecialChars(str) {\r\n      const specialChars = '[`!@#$%^&*()_+-=[]{};\\':\"\\\\|,.<>/?~]/'\r\n      return specialChars.split('')\r\n        .some((specialChar) => str.includes(specialChar))\r\n    },\r\n    containsNumbers(str) {\r\n      const specialChars = '1234567890'\r\n      return specialChars.split('')\r\n        .some((specialChar) => str.includes(specialChar))\r\n    },\r\n    checkStringLength(str) {\r\n      if (str.length >= 8 && str.length <= 16) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    checkEmail(string) {\r\n      const condition = string.includes('@')\r\n      if (condition) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    checkPassword() {\r\n      const result1 = this.containsSpecialChars(this.changePasswordText)\r\n      const result2 = this.containsNumbers(this.changePasswordText)\r\n      const result3 = this.checkStringLength(this.changePasswordText)\r\n      if (result1 === false) {\r\n        this.unsuccessful = 'password needs a special character'\r\n        return false\r\n      } else if (result2 === false) {\r\n        this.unsuccessful = 'password needs a number'\r\n        return false\r\n      } else if (result3 === false) {\r\n        this.unsuccessful = 'password needs to be between 8 and 16 characters'\r\n        return false\r\n      } else {\r\n        this.unsuccessful = ''\r\n        return true\r\n      }\r\n    },\r\n    login() {\r\n      const check = this.checkPassword()\r\n      const check2 = this.checkEmail(this.changeEmailText)\r\n      if (check2 === false) {\r\n        this.unsuccessful = 'email needs to contain @'\r\n      } else if (check === false) {\r\n        // responses in\r\n      } else {\r\n        const payload = '{\"email\": ' + this.changeEmailText + ', \"password\": ' + this.changePasswordText + ' }'\r\n        this.mqtt_client.publish(this.topic, payload, this.qos)\r\n      }\r\n    },\r\n    register() {\r\n      // not working\r\n      this.$router.push('/register')\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n.center {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  background-color: #80BAB2;\r\n}\r\n#bittpnRegister {\r\n    display: inline-block;\r\n    margin: 10px;\r\n}\r\n</style>\r\n"]}]}