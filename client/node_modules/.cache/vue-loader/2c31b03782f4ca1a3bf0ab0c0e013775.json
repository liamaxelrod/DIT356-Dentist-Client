{"remainingRequest":"C:\\Users\\adria\\Desktop\\mini\\dentist-client\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\adria\\Desktop\\mini\\dentist-client\\client\\src\\views\\Register.vue?vue&type=style&index=0&id=63ae9146&lang=css&","dependencies":[{"path":"C:\\Users\\adria\\Desktop\\mini\\dentist-client\\client\\src\\views\\Register.vue","mtime":1673013908786},{"path":"C:\\Users\\adria\\Desktop\\mini\\dentist-client\\client\\node_modules\\css-loader\\dist\\cjs.js","mtime":1673013735848},{"path":"C:\\Users\\adria\\Desktop\\mini\\dentist-client\\client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1673013746587},{"path":"C:\\Users\\adria\\Desktop\\mini\\dentist-client\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":1673013740909},{"path":"C:\\Users\\adria\\Desktop\\mini\\dentist-client\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673013735199},{"path":"C:\\Users\\adria\\Desktop\\mini\\dentist-client\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1673013746585}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouYmFja2dyb3VuZCB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOw0KICBoZWlnaHQ6IDEwMCU7DQogIGJhY2tncm91bmQtY29sb3I6ICM4MEJBQjI7DQogIG1pbi13aWR0aDogNzAwcHg7DQogIG1pbi1oZWlnaHQ6IDYwMHB4Ow0KfQ0KLmFib3ZlQnV0dG9uc3sNCiAgaGVpZ2h0OiA1NTBweA0KfQ0KI3BvcC11cCB7DQogICAgY29sb3I6IHJlZDsNCiAgICBmb250LXNpemU6IDIwcHg7DQp9DQojcmVnaXN0ZXJCdXR0b24gew0KICAgIHdpZHRoOiAxMDAlOw0KfQ0K"},{"version":3,"sources":["Register.vue"],"names":[],"mappings":";AAkIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Register.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    <div class=\"background\">\r\n      <div class=\"warning\">\r\n      <p id=\"pop-up\">{{ this.unsuccessful }}</p>\r\n    </div>\r\n    <div class=\"card\" style=\"width: 25rem;\">\r\n  <div class=\"card-body\">\r\n    <h5 class=\"card-title\">Hello! Welcome to Dentistimo</h5>\r\n    <p class=\"card-text\">Enter your details below and click register.</p>\r\n  </div>\r\n  <ul class=\"list-group list-group-flush\">\r\n    <li class=\"list-group-item\"><input id=\"inputFirstName\" v-model='changeFirstNameText' placeholder=\"Enter your first name\"></li>\r\n    <li class=\"list-group-item\"><input id=\"inputLastName\" v-model='changeLastNameText' placeholder=\"Enter your last name\"></li>\r\n    <li class=\"list-group-item\"><input id=\"inputpassword\" v-model='changePasswordText' placeholder=\"Enter new password\"></li>\r\n    <li class=\"list-group-item\"><input id=\"checkPassword\" v-model='changeCheckPasswordText' placeholder=\"Re-enter your password\"></li>\r\n    <li class=\"list-group-item\"><input id=\"inputCompany\" v-model='changecompanyText' placeholder=\"Enter company ID\"></li>\r\n    <li class=\"list-group-item\"><input id=\"inputeEmail\" v-model='changeEmailText' placeholder=\"Enter new email\"></li>\r\n  </ul>\r\n  <div class=\"card-body\">\r\n    <button id=\"registerButton\" @click=\"register\" class=\"btn btn-dark btn-lg\">Register</button>\r\n  </div>\r\n</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport checkingInputs from '../checkingInputs'\r\nimport mymqtt from '../mymqtt'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      mqtt_client: null,\r\n      receive: '', // receives messages\r\n      requestID: '',\r\n      qos: 2,\r\n      topic: 'dentistimo/register/dentist',\r\n      changeFirstNameText: '',\r\n      changeLastNameText: '',\r\n      changePasswordText: '',\r\n      changeCheckPasswordText: '',\r\n      changecompanyText: '',\r\n      changeEmailText: '',\r\n      unsuccessful: '',\r\n      subscription: {\r\n        topic: 'test',\r\n        qos: 0\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.mqtt_client = mymqtt.createClient()\r\n    const msgCallback = (topic, message) => {\r\n      this.unsuccessful = ''\r\n      this.receive = message.toString()\r\n      console.log(topic)\r\n      console.log('message received' + message.toString())\r\n      if (topic.includes('error')) {\r\n        this.unsuccessful = this.receive\r\n      } else if (message.includes(this.changeEmailText)) {\r\n        console.log('success')\r\n        this.$router.push('/login')\r\n      }\r\n      // console.log({ topic: topic, message: message.toString() })\r\n    }\r\n    this.mqtt_client.on('message', msgCallback)\r\n    this.mqtt_client.on('subscribe', (topic) => {\r\n      console.log('Subscribed too: ', topic)\r\n    })\r\n  },\r\n  methods: {\r\n    checkPassword() {\r\n      const result1 = checkingInputs.containsSpecialChars(this.changePasswordText)\r\n      const result2 = checkingInputs.strinContainsNumbers(this.changePasswordText)\r\n      const result3 = checkingInputs.checkStringLength(this.changePasswordText)\r\n      // console.log(result1, result2, result3)\r\n      if (result1 === false) {\r\n        this.unsuccessful = 'password needs a special character in enter new passworrd'\r\n        return false\r\n      } else if (result2 === false) {\r\n        this.unsuccessful = 'password needs a number in enter new passworrd'\r\n        return false\r\n      } else if (result3 === false) {\r\n        this.unsuccessful = 'password needs to be between 8 and 99 characters in enter new passworrd'\r\n        return false\r\n      } else {\r\n        this.unsuccessful = ''\r\n        return true\r\n      }\r\n    },\r\n    register() {\r\n      if (this.checkPassword() === false) {\r\n        // responses are in checkPassword()\r\n      } else if (checkingInputs.checkSameString(this.changePasswordText, this.changeCheckPasswordText) === false) {\r\n        this.unsuccessful = 'passwords are not the same'\r\n      } else if (this.changeFirstNameText === '') {\r\n        this.unsuccessful = 'first name is empty'\r\n      } else if (this.changeLastNameText === '') {\r\n        this.unsuccessful = 'last name is empty'\r\n      } else if (this.changecompanyText === '') {\r\n        this.unsuccessful = 'company is empty'\r\n      } else if (this.changeEmailText === '') {\r\n        this.unsuccessful = 'email is empty'\r\n      } else {\r\n        this.requestID = checkingInputs.makeRandomId(10)\r\n        this.mqtt_client.subscribe('dentistimo/register/dentist/' + this.requestID, { qos: 2 }, (error, res) => {\r\n          if (error) { console.log('error = ', error) } else { console.log('res = ', res) }\r\n        })\r\n        this.mqtt_client.subscribe('dentistimo/register/error/' + this.requestID, { qos: 2 }, (error, res) => {\r\n          if (error) { console.log('error = ', error) } else { console.log('res = ', res) }\r\n        })\r\n        const payload = JSON.stringify({\r\n          firstName: this.changeFirstNameText,\r\n          lastName: this.changeLastNameText,\r\n          password: this.changePasswordText,\r\n          passwordCheck: this.changeCheckPasswordText,\r\n          officeId: this.changecompanyText,\r\n          email: this.changeEmailText,\r\n          requestId: this.requestID\r\n        })\r\n        this.mqtt_client.publish(this.topic, payload, this.qos)\r\n        console.log('message published')\r\n        this.unsuccessful = 'register error please try again later'\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.background {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  background-color: #80BAB2;\r\n  min-width: 700px;\r\n  min-height: 600px;\r\n}\r\n.aboveButtons{\r\n  height: 550px\r\n}\r\n#pop-up {\r\n    color: red;\r\n    font-size: 20px;\r\n}\r\n#registerButton {\r\n    width: 100%;\r\n}\r\n</style>\r\n"]}]}