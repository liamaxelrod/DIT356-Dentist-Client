{"remainingRequest":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\src\\views\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\src\\views\\Login.vue","mtime":1672661305794},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liam's PC\\Desktop\\dentist-client\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgbXltcXR0IGZyb20gJy4uL215bXF0dCcNCmltcG9ydCBjaGVja2luZ0lucHV0cyBmcm9tICcuLi9jaGVja2luZ0lucHV0cycNCg0KZXhwb3J0IGRlZmF1bHQgew0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBub3RPckxvZ2luOiAnJywNCiAgICAgIG1xdHRfY2xpZW50OiBudWxsLA0KICAgICAgcmVjZWl2ZTogJycsDQogICAgICByZXF1ZXN0SUQ6ICcnLA0KICAgICAgcW9zOiAyLA0KICAgICAgdG9waWM6ICdkZW50aXN0aW1vL2xvZ2luL2RlbnRpc3QnLA0KICAgICAgY2hhbmdlRW1haWxUZXh0OiAnJywNCiAgICAgIGNoYW5nZVBhc3N3b3JkVGV4dDogJycsDQogICAgICB1bnN1Y2Nlc3NmdWw6ICcnDQogICAgfQ0KICB9LA0KICBtb3VudGVkKCkgew0KICAgIHRoaXMubXF0dF9jbGllbnQgPSBteW1xdHQuY3JlYXRlQ2xpZW50KCkNCiAgICBjb25zdCBtc2dDYWxsYmFjayA9ICh0b3BpYywgbWVzc2FnZSkgPT4gew0KICAgICAgdGhpcy51bnN1Y2Nlc3NmdWwgPSAnJw0KICAgICAgdGhpcy5yZWNlaXZlID0gbWVzc2FnZS50b1N0cmluZygpDQogICAgICBpZiAodG9waWMuaW5jbHVkZXMoJ2Vycm9yJykpIHsNCiAgICAgICAgdGhpcy51bnN1Y2Nlc3NmdWwgPSB0aGlzLnJlY2VpdmUNCiAgICAgICAgY29uc29sZS5sb2coJ2ZhaWx1cmUnKQ0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgY29uc29sZS5sb2coJ3N1Y2Nlc3MnKQ0KICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnJlY2VpdmUpDQogICAgICAgIGlmICh0aGlzLnJlY2VpdmUuaW5jbHVkZXModGhpcy5jaGFuZ2VFbWFpbFRleHQpKSB7DQogICAgICAgICAgLy8gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2FjY291bnRJbmZvJykgLy8gLS0+IGRvbid0IGtub3cgaWYgdGhlcmUgd2lsbCBiZSBhbiBlcnJvciBpZiBpdCBkb2Vzbid0IGV4aXN0d2hlbiB5b3UgZmlyc3QgbG9naW4gZm9yIHRoZSBmaXJzdCB0aW1lDQogICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2FjY291bnRJbmZvJywgdGhpcy5yZWNlaXZlKQ0KICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvJykNCiAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIHRoaXMudW5zdWNjZXNzZnVsID0gJ0xvZ2luIGZhaWxlZCcgLy8gbm90IHdvcmtpbmcgZmlndXJlZCBvdXQgd2hlbiBGZWxpeCBpcyBwcm9ncmFtcyBub3QgcnVubmluZyB3aXRoIG15DQogICAgICAgIH0NCiAgICAgIH0NCiAgICAgIC8vIGNvbnNvbGUubG9nKHsgdG9waWM6IHRvcGljLCBtZXNzYWdlOiBtZXNzYWdlLnRvU3RyaW5nKCkgfSkNCiAgICB9DQogICAgdGhpcy5tcXR0X2NsaWVudC5vbignbWVzc2FnZScsIG1zZ0NhbGxiYWNrKQ0KICAgIHRoaXMubXF0dF9jbGllbnQub24oJ3N1YnNjcmliZScsICh0b3BpYykgPT4gew0KICAgICAgY29uc29sZS5sb2coJ1N1YnNjcmliZWQgdG9vOiAnLCB0b3BpYykNCiAgICB9KQ0KICB9LA0KICBtZXRob2RzOiB7DQogICAgY2hlY2tQYXNzd29yZCgpIHsNCiAgICAgIGNvbnN0IHJlc3VsdDEgPSBjaGVja2luZ0lucHV0cy5jb250YWluc1NwZWNpYWxDaGFycyh0aGlzLmNoYW5nZVBhc3N3b3JkVGV4dCkNCiAgICAgIGNvbnN0IHJlc3VsdDIgPSBjaGVja2luZ0lucHV0cy5zdHJpbkNvbnRhaW5zTnVtYmVycyh0aGlzLmNoYW5nZVBhc3N3b3JkVGV4dCkNCiAgICAgIGNvbnN0IHJlc3VsdDMgPSBjaGVja2luZ0lucHV0cy5jaGVja1N0cmluZ0xlbmd0aCh0aGlzLmNoYW5nZVBhc3N3b3JkVGV4dCkNCiAgICAgIGlmIChyZXN1bHQxID09PSBmYWxzZSkgew0KICAgICAgICB0aGlzLnVuc3VjY2Vzc2Z1bCA9ICdwYXNzd29yZCBuZWVkcyBhIHNwZWNpYWwgY2hhcmFjdGVyJw0KICAgICAgICByZXR1cm4gZmFsc2UNCiAgICAgIH0gZWxzZSBpZiAocmVzdWx0MiA9PT0gZmFsc2UpIHsNCiAgICAgICAgdGhpcy51bnN1Y2Nlc3NmdWwgPSAncGFzc3dvcmQgbmVlZHMgYSBudW1iZXInDQogICAgICAgIHJldHVybiBmYWxzZQ0KICAgICAgfSBlbHNlIGlmIChyZXN1bHQzID09PSBmYWxzZSkgew0KICAgICAgICB0aGlzLnVuc3VjY2Vzc2Z1bCA9ICdwYXNzd29yZCBuZWVkcyB0byBiZSBiZXR3ZWVuIDggYW5kIDk5IGNoYXJhY3RlcnMnDQogICAgICAgIHJldHVybiBmYWxzZQ0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgdGhpcy51bnN1Y2Nlc3NmdWwgPSAnJw0KICAgICAgICByZXR1cm4gdHJ1ZQ0KICAgICAgfQ0KICAgIH0sDQogICAgbG9naW4oKSB7DQogICAgICAvLyBjb25zdCB0ZXN0MSA9IEpTT04uc3RyaW5naWZ5KHsNCiAgICAgIC8vICAgdG9rZW46ICcxMjNRV0UhQCMnLA0KICAgICAgLy8gICBkZW50aXN0SWQ6ICcxMjM0NTY3ODkNCiAgICAgIC8vICAgZW1haWw6ICdsaWFtYXhlbHJvZEBnbWFpbC5jb20nLA0KICAgICAgLy8gICBmaXJzdE5hbWU6ICdsaWFtJywNCiAgICAgIC8vICAgbGFzdE5hbWU6ICdheGVscm9kJywNCiAgICAgIC8vICAgb2ZmaWNlSWQ6IDENCiAgICAgIC8vIH0pDQogICAgICAvLyBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYWNjb3VudEluZm8nLCB0ZXN0MSkNCiAgICAgIGNvbnN0IGNoZWNrID0gdGhpcy5jaGVja1Bhc3N3b3JkKCkNCiAgICAgIGNvbnN0IGNoZWNrMiA9IGNoZWNraW5nSW5wdXRzLmNoZWNrRW1haWwodGhpcy5jaGFuZ2VFbWFpbFRleHQpDQogICAgICBpZiAoY2hlY2syID09PSBmYWxzZSkgew0KICAgICAgICB0aGlzLnVuc3VjY2Vzc2Z1bCA9ICdlbWFpbCBuZWVkcyB0byBjb250YWluIEAnDQogICAgICB9IGVsc2UgaWYgKGNoZWNrID09PSBmYWxzZSkgew0KICAgICAgICAvLyByZXNwb25zZXMgaW4gY2hlY2tQYXNzd29yZCgpDQogICAgICB9IGVsc2Ugew0KICAgICAgICB0aGlzLnJlcXVlc3RJRCA9IGNoZWNraW5nSW5wdXRzLm1ha2VSYW5kb21JZCgxMCkNCiAgICAgICAgdGhpcy5tcXR0X2NsaWVudC5zdWJzY3JpYmUoJ2RlbnRpc3RpbW8vbG9naW4vZGVudGlzdC8nICsgdGhpcy5yZXF1ZXN0SUQsIHsgcW9zOiAyIH0sIChlcnJvciwgcmVzKSA9PiB7DQogICAgICAgICAgaWYgKGVycm9yKSB7IGNvbnNvbGUubG9nKCdlcnJvciA9ICcsIGVycm9yKSB9IGVsc2UgeyBjb25zb2xlLmxvZygncmVzID0gJywgcmVzKSB9DQogICAgICAgIH0pDQogICAgICAgIHRoaXMubXF0dF9jbGllbnQuc3Vic2NyaWJlKCdkZW50aXN0aW1vL2xvZ2luL2Vycm9yLycgKyB0aGlzLnJlcXVlc3RJRCwgeyBxb3M6IDIgfSwgKGVycm9yLCByZXMpID0+IHsNCiAgICAgICAgICBpZiAoZXJyb3IpIHsgY29uc29sZS5sb2coJ2Vycm9yID0gJywgZXJyb3IpIH0gZWxzZSB7IGNvbnNvbGUubG9nKCdyZXMgPSAnLCByZXMpIH0NCiAgICAgICAgfSkNCiAgICAgICAgY29uc3QgcGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KHsNCiAgICAgICAgICBlbWFpbDogdGhpcy5jaGFuZ2VFbWFpbFRleHQsDQogICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuY2hhbmdlUGFzc3dvcmRUZXh0LA0KICAgICAgICAgIHJlcXVlc3RJZDogdGhpcy5yZXF1ZXN0SUQNCiAgICAgICAgfSkNCiAgICAgICAgdGhpcy5tcXR0X2NsaWVudC5wdWJsaXNoKHRoaXMudG9waWMsIHBheWxvYWQsIHRoaXMucW9zKQ0KICAgICAgICB0aGlzLnVuc3VjY2Vzc2Z1bCA9ICdsb2dpbiBlcnJvciBwbGVhc2UgdHJ5IGFnYWluIGxhdGVyJyAvLyBpZiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgdGhpcyB3aWxsIHJldHVybiB0byBiZWluZyBibGFuaw0KICAgICAgfQ0KICAgIH0sDQogICAgcmVnaXN0ZXIoKSB7DQogICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnL3JlZ2lzdGVyJykNCiAgICB9DQogIH0NCn0NCg0K"},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";AAifile":"Login.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"center\">\r\n    <div class=\"warning\">\r\n      <p id=\"pop-up\">{{ this.unsuccessful }}</p>\r\n    </div>\r\n    <div class=\"inputAndButton\">\r\n      <input id=\"inputEmail\" v-model='changeEmailText' placeholder=\"enter new email\">\r\n      <P></P>\r\n      <input id=\"inputpassword\" v-model='changePasswordText' placeholder=\"enter new password\">\r\n      <P></P>\r\n      <button id=\"bittpnLogin\" @click=\"login\" class=\"btn btn-success btn-lg\">login</button>\r\n      <button id=\"bittpnRegister\" @click=\"register\" class=\"btn btn-success btn-lg\">register</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport mymqtt from '../mymqtt'\r\nimport checkingInputs from '../checkingInputs'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      notOrLogin: '',\r\n      mqtt_client: null,\r\n      receive: '',\r\n      requestID: '',\r\n      qos: 2,\r\n      topic: 'dentistimo/login/dentist',\r\n      changeEmailText: '',\r\n      changePasswordText: '',\r\n      unsuccessful: ''\r\n    }\r\n  },\r\n  mounted() {\r\n    this.mqtt_client = mymqtt.createClient()\r\n    const msgCallback = (topic, message) => {\r\n      this.unsuccessful = ''\r\n      this.receive = message.toString()\r\n      if (topic.includes('error')) {\r\n        this.unsuccessful = this.receive\r\n        console.log('failure')\r\n      } else {\r\n        console.log('success')\r\n        console.log(this.receive)\r\n        if (this.receive.includes(this.changeEmailText)) {\r\n          // localStorage.removeItem('accountInfo') // --> don't know if there will be an error if it doesn't existwhen you first login for the first time\r\n          localStorage.setItem('accountInfo', this.receive)\r\n          this.$router.push('/')\r\n          location.reload()\r\n        } else {\r\n          this.unsuccessful = 'Login failed' // not working figured out when Felix is programs not running with my\r\n        }\r\n      }\r\n      // console.log({ topic: topic, message: message.toString() })\r\n    }\r\n    this.mqtt_client.on('message', msgCallback)\r\n    this.mqtt_client.on('subscribe', (topic) => {\r\n      console.log('Subscribed too: ', topic)\r\n    })\r\n  },\r\n  methods: {\r\n    checkPassword() {\r\n      const result1 = checkingInputs.containsSpecialChars(this.changePasswordText)\r\n      const result2 = checkingInputs.strinContainsNumbers(this.changePasswordText)\r\n      const result3 = checkingInputs.checkStringLength(this.changePasswordText)\r\n      if (result1 === false) {\r\n        this.unsuccessful = 'password needs a special character'\r\n        return false\r\n      } else if (result2 === false) {\r\n        this.unsuccessful = 'password needs a number'\r\n        return false\r\n      } else if (result3 === false) {\r\n        this.unsuccessful = 'password needs to be between 8 and 99 characters'\r\n        return false\r\n      } else {\r\n        this.unsuccessful = ''\r\n        return true\r\n      }\r\n    },\r\n    login() {\r\n      // const test1 = JSON.stringify({\r\n      //   token: '123QWE!@#',\r\n      //   dentistId: '123456789\r\n      //   email: 'liamaxelrod@gmail.com',\r\n      //   firstName: 'liam',\r\n      //   lastName: 'axelrod',\r\n      //   officeId: 1\r\n      // })\r\n      // localStorage.setItem('accountInfo', test1)\r\n      const check = this.checkPassword()\r\n      const check2 = checkingInputs.checkEmail(this.changeEmailText)\r\n      if (check2 === false) {\r\n        this.unsuccessful = 'email needs to contain @'\r\n      } else if (check === false) {\r\n        // responses in checkPassword()\r\n      } else {\r\n        this.requestID = checkingInputs.makeRandomId(10)\r\n        this.mqtt_client.subscribe('dentistimo/login/dentist/' + this.requestID, { qos: 2 }, (error, res) => {\r\n          if (error) { console.log('error = ', error) } else { console.log('res = ', res) }\r\n        })\r\n        this.mqtt_client.subscribe('dentistimo/login/error/' + this.requestID, { qos: 2 }, (error, res) => {\r\n          if (error) { console.log('error = ', error) } else { console.log('res = ', res) }\r\n        })\r\n        const payload = JSON.stringify({\r\n          email: this.changeEmailText,\r\n          password: this.changePasswordText,\r\n          requestId: this.requestID\r\n        })\r\n        this.mqtt_client.publish(this.topic, payload, this.qos)\r\n        this.unsuccessful = 'login error please try again later' // if a message is received this will return to being blank\r\n      }\r\n    },\r\n    register() {\r\n      this.$router.push('/register')\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n.center {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  background-color: #80BAB2;\r\n  min-width: 700px;\r\n  min-height: 750px;\r\n}\r\n\r\n#bittpnRegister {\r\n  display: inline-block;\r\n  margin: 10px;\r\n}\r\n</style>\r\n"]}]}